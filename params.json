{"name":"Simple calendar","tagline":"A wonderfully simple calendar gem for Rails","body":"![travis ci](https://travis-ci.org/excid3/simple_calendar.svg?branch=2.0)\r\n\r\nSimple Calendar\r\n===============\r\n\r\nSimple Calendar is designed to do one thing really really well: render a\r\ncalendar. It lets you render a calendar of any size. Maybe you want a\r\nday view, a 4 day agenda, a week view, a month view, or a 6 week\r\ncalendar. You can do all of that with the new gem, just give it a range\r\nof dates to render.\r\n\r\nIt doesn't depend on any ORM so you're free to use it with ActiveRecord,\r\nMongoid, any other ORM, or pure Ruby objects.\r\n\r\nThanks to all contributors for your wonderful help!\r\n\r\n![calendar](https://s3.amazonaws.com/f.cl.ly/items/1T0t1s0W212d28282V2M/Screen%20Shot%202013-03-28%20at%209.44.49%20AM.png)\r\n\r\nInstallation\r\n------------\r\n\r\nJust add this into your Gemfile followed by a bundle install:\r\n\r\n    gem \"simple_calendar\", \"~> 2.0\"\r\n\r\nUsage\r\n-----\r\n\r\nGenerating calendars is extremely simple with simple_calendar.\r\n\r\nThe first parameter is a symbol that looks up the current date in\r\n`params`. If no date is found, it will use the current date.\r\n\r\nIn these examples, we're using `:start_date` which is the default.\r\n\r\n### Month Calendar\r\n\r\nYou can generate a calendar for the month with the `month_calendar`\r\nmethod.\r\n\r\n```erb\r\n<%= month_calendar do |date| %>\r\n  <%= date %>\r\n<% end %>\r\n```\r\n\r\n### Week Calendar\r\n\r\nYou can generate a week calendar with the `week_calendar` method.\r\n\r\n```erb\r\n<%= week_calendar number_of_weeks: 2 do |date| %>\r\n  <%= date %>\r\n<% end %>\r\n```\r\n\r\nSetting `number_of_weeks` is optional and defaults to 1.\r\n\r\n### Custom Length Calendar\r\n\r\nYou can generate calendars of any length by passing in the number of days you want to render.\r\n\r\n```erb\r\n<%= calendar number_of_days: 4 do |date| %>\r\n  <%= date %>\r\n<% end %>\r\n```\r\n\r\nSetting `number_of_days` is optional and defaults to 4.\r\n\r\n## Rendering Events\r\n\r\nWhat's a calendar without events in it? There are two simple steps for creating\r\ncalendars with events.\r\n\r\nThe first step is to add the following to your model. We'll be using a\r\nmodel called Meeting, but you can add this to any model or Ruby object.\r\n\r\nHere's an example model:\r\n\r\n```bash\r\nrails g scaffold Meeting name start_time:datetime\r\n```\r\n\r\nBy default it uses `start_time` as the attribute name.\r\n\r\n**If you'd like to use another attribute other than start_time, just\r\npass it in as the `attribute` option**\r\n\r\n```erb\r\n<%= month_calendar(attribute: :starts_at) do |date| %>\r\n  <%= day %>\r\n<% end %>\r\n```\r\n\r\nIn your controller, query for these meetings and store them in an instance\r\nvariable. Normally you'll want to search for the ones that only show up\r\ninside the calendar view (for example, you may only want to grab the events for\r\nthe current month).\r\n\r\nWe'll just load up all the meetings for this example.\r\n\r\n```ruby\r\ndef index\r\n  @meetings = Meeting.all\r\nend\r\n```\r\n\r\nThen in your view, you can pass in the `events` option to render. The\r\nmeetings will automatically be filtered out by day for you.\r\n\r\n```erb\r\n<%= month_calendar events: @meetings do |date, meetings| %>\r\n  <%= date %>\r\n\r\n  <% meetings.each do |meeting| %>\r\n    <div>\r\n      <%= meeting.name %>\r\n    </div>\r\n  <% end %>\r\n<% end %>\r\n```\r\n\r\nIf you pass in objects that don't respond to the attribute method (like\r\nstarts_at), then all the meetings will be yielded each day. This lets you\r\ndo custom filtering however you want.\r\n\r\n## Customizing The Calendar\r\n\r\nThere are a handful of configuration options that you can use in\r\nsimple_calendar.\r\n\r\n### Customizing Views\r\n\r\nYou can customize the layouts for each of the calendars by running the\r\ngenerators for simple_calendar:\r\n\r\n```bash\r\nrails g simple_calendar:views\r\n```\r\n\r\nThis will generate a folder in app/views called simple_calendar that you\r\nedit to your heart's desire.\r\n\r\n### Time Zones\r\n\r\nSetting `Time.zone` will make sure the calendar start days are correctly computed\r\nin the right timezone. You can set this globally in your `application.rb` file or\r\nif you have a User model with a time_zone attribute, you can set it on every request by using\r\na before_filter like the following example.\r\n\r\nThis code example uses [Devise](https://github.com/plataformatec/devise)'s\r\n`current_user` and `user_signed_in?` methods to retrieve the user's timezone and set it for the duration of the request.\r\nMake sure to change the `:user_signed_in?` and `current_user` methods if you are\r\nusing some other method of authentication.\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  before_filter :set_time_zone, if: :user_signed_in?\r\n\r\n  private\r\n\r\n    def set_time_zone\r\n      Time.zone = current_user.time_zone\r\n    end\r\nend\r\n```\r\n\r\nIf you want to set the time zone globally, you can set the following in\r\n`config/application.rb`:\r\n\r\n```ruby\r\nconfig.time_zone = 'Central Time (US & Canada)'\r\n```\r\n\r\n### Beginning Of Week\r\n\r\nYou can also change the beginning day of the week by setting\r\n`Date.beginning_of_week` in a `before_filter` just like in the previous\r\nexample. If you want to set this globally, you can put this line in\r\n`config/application.rb`:\r\n\r\n```ruby\r\nconfig.beginning_of_week = :sunday\r\n```\r\n\r\n### Custom CSS Classes\r\n\r\nSetting classes on the table and elements are pretty easy.\r\n\r\nYou can simply run the following command to install the calendar views\r\nand then add your own helpers to the table, rows, headers, and days.\r\n\r\nsimple_calendar comes with a handful of useful classes for each day in\r\nthe calendar that you can use:\r\n\r\n```scss\r\n.simple-calendar {\r\n  .day {}\r\n\r\n  .wday-0 {}\r\n  .wday-1 {}\r\n  .wday-2 {}\r\n  .wday-3 {}\r\n  .wday-4 {}\r\n  .wday-5 {}\r\n  .wday-6 {}\r\n\r\n  .today {}\r\n  .past {}\r\n  .future {}\r\n\r\n  .start-date {}\r\n\r\n  .prev-month {}\r\n  .next-month { }\r\n  .current-month {}\r\n\r\n  .has-events {}\r\n}\r\n```\r\n\r\nJust paste this into a CSS file and add your styles and they will be\r\napplied to the calendar. All of these classes are inside of the\r\nsimple-calendar class so you can scope your own classes with similar\r\nnames.\r\n\r\n### Custom Header Title And Links\r\n\r\nHeader and title links are easily adjusted by generating views and\r\nmodifying them inside your application.\r\n\r\nFor example, if you'd like to use abbreviated month names, you can modify\r\nthe views from this:\r\n\r\n```erb\r\n<%= I18n.t(\"date.month_names\")[start_date.month] %> <%= start_date.year %>\r\n```\r\n\r\nTo\r\n\r\n```erb\r\n<%= I18n.t(\"date.abbr_month_names\")[start_date.month] %> <%= start_date.year %>\r\n```\r\n\r\nYour calendar will now display \"Sep 2015\" instead of \"September 2015\" at\r\nthe top! :)\r\n\r\n### AJAX Calendars\r\n\r\nRendering calendars that update with AJAX is pretty simple. You'll need\r\nto wrap your calendar in a div, overwrite the `next_link` and `previous_link` options, and setup your\r\ncontroller to respond to JS requests. The response can simply replace\r\nthe HTML of the div with the newly rendered calendar.\r\n\r\nTake a look at **[excid3/simple_calendar-ajax-example](https://github.com/excid3/simple_calendar-ajax-example)** to see how it is done.\r\n\r\n\r\n## Custom Calendars\r\n\r\nThe three main calendars available should take care of most of your\r\nneeds, but simple_calendar makes it easy to create completely custom\r\ncalendars (like maybe you only want business weeks).\r\n\r\nIf you'd like to make a completely custom calendar, you can create a new\r\nclass that inherits from `SimpleCalendar::Calendar`. The name you give\r\nit will correspond to the name of the template it will try to render.\r\n\r\n\r\nThe main method you'll need to implement is the `date_range` so that\r\nyour calendar can have a custom length.\r\n\r\n```\r\nclass SimpleCalendar::BusinessWeekCalendar\r\n  private\r\n\r\n    def date_range\r\n      beginning = start_date.beginning_of_week + 1.day\r\n      ending    = start_date.end_of_week - 1.day\r\n      (beginning..ending)\r\n    end\r\nend\r\n```\r\n\r\nTo render this in the view, you can do:\r\n\r\n```erb\r\n<%= SimpleCalendar::BusinessWeekCalendar.new(self).render do |date| %>\r\n  <%= day %>\r\n<% end %>\r\n```\r\n\r\nAnd this will render the\r\n`app/views/simple_calendar/_business_week_calendar.html.erb` partial.\r\n\r\nYou can copy one of the existing templates to use for the partial for\r\nyour new calendar.\r\n\r\n## View Specs and Tests\r\n\r\nIf you're running view specs against views with calendars, you may run into route generation errors like the following:\r\n\r\n```\r\nFailure/Error: render\r\nActionView::Template::Error:\r\n  No route matches {:action=>\"show\", :controller=>\"controller_name\", :start_date=>Sun, 29 Mar 2015}\r\n```\r\n\r\nIf so, you can stub out the appropriate method like so (rspec 3 and up):\r\n\r\n```\r\nexpect_any_instance_of(SimpleCalendar::Calendar).to receive(:link_to).at_least(:once).and_return(\"\")\r\n```\r\n\r\nWith modifications as appropriate.\r\n\r\n## TODO\r\n\r\n- Multi-day events\r\n- Rspec tests for Calendar\r\n- Rspec tests for MonthCalendar\r\n- Rspec tests for WeekCalendar\r\n\r\n## Author\r\n\r\nChris Oliver <chris@gorails.com>\r\n\r\n[https://gorails.com](https://gorails.com)\r\n\r\n[@excid3](https://twitter.com/excid3)\r\n\r\n## Support\r\n\r\nNeed help\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}