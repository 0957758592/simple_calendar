{"name":"Simple calendar","tagline":"A wonderfully simple calendar gem for Rails","body":"![travis ci](https://travis-ci.org/excid3/simple_calendar.svg?branch=master)\r\n\r\nSimple Calendar\r\n===============\r\n\r\nSimple Calendar is designed to do one thing really really well: render a\r\ncalendar. It lets you render a calendar of any size. Maybe you want a\r\nday view, a 4 day agenda, a week view, a month view, or a 6 week\r\ncalendar. You can do all of that with the new gem, just give it a range\r\nof dates to render.\r\n\r\nIt doesn't depend on any ORM so you're free to use it with ActiveRecord,\r\nMongoid, any other ORM, or pure Ruby objects.\r\n\r\nThanks to all contributors for your wonderful help!\r\n\r\n![calendar](https://s3.amazonaws.com/f.cl.ly/items/1T0t1s0W212d28282V2M/Screen%20Shot%202013-03-28%20at%209.44.49%20AM.png)\r\n\r\nInstallation\r\n------------\r\n\r\nJust add this into your Gemfile followed by a bundle install:\r\n\r\n    gem \"simple_calendar\", \"~> 1.1.0\"\r\n\r\nUsage\r\n-----\r\n\r\nGenerating calendars is extremely simple with simple_calendar in version 1.1.\r\n\r\nThe first parameter is a symbol that looks up the current date in\r\n`params`. If no date is found, it will use the current date.\r\n\r\nIn these examples, we're using `:start_date` which is the default.\r\n\r\n### Month Calendar\r\n\r\nYou can generate a calendar for the month with the `month_calendar`\r\nmethod.\r\n\r\n```erb\r\n<%= month_calendar do |date| %>\r\n  <%= date %>\r\n<% end %>\r\n```\r\n\r\n### Week Calendar\r\n\r\nYou can generate a week calendar with the `week_calendar` method.\r\n\r\n```erb\r\n<%= week_calendar number_of_weeks: 2 do |date| %>\r\n  <%= date %>\r\n<% end %>\r\n```\r\n\r\nSetting `number_of_weeks` is optional and defaults to 1.\r\n\r\n### Custom Length Calendar\r\n\r\nYou can generate calendars of any length by passing in the number of days you want to render.\r\n\r\n```erb\r\n<%= calendar number_of_days: 4 do |date| %>\r\n  <%= date %>\r\n<% end %>\r\n```\r\n\r\nSetting `number_of_days` is optional and defaults to 4.\r\n\r\n## Rendering Events\r\n\r\nWhat's a calendar without events in it? There are two simple steps for creating\r\ncalendars with events.\r\n\r\nThe first step is to add the following to your model. We'll be using a\r\nmodel called Meeting, but you can add this to any model or Ruby object.\r\n\r\nHere's an example model:\r\n\r\n```bash\r\nrails g scaffold Meeting name starts_at:datetime\r\n```\r\n\r\nWe use the `has_calendar` method to tell simple_calendar how to filter\r\nand sort the meetings on the different calendar days. This should be the\r\nstart date/time of your meeting. By default it uses `starts_at` as the\r\nattribute name.\r\n\r\n```ruby\r\nclass Meeting < ActiveRecord::Base\r\n  extend SimpleCalendar\r\n  has_calendar\r\n\r\n  # Or set a custom attribute for simple_calendar to sort by\r\n  # has_calendar :attribute => :your_starting_time_column_name\r\nend\r\n```\r\n\r\nIn your controller, query for these meetings and store them in an instance\r\nvariable. We'll just load up all the meetings for this example.\r\n\r\n```ruby\r\ndef index\r\n  @meetings = Meeting.all\r\nend\r\n```\r\n\r\nThen in your view, you can pass in the `events` option to render. The\r\nmeetings will automatically be filtered out by day for you.\r\n\r\n```erb\r\n<%= month_calendar events: @meetings do |date, meetings| %>\r\n  <%= date %>\r\n\r\n  <% meetings.each do |meeting| %>\r\n    <div>\r\n      <%= meeting.name %>\r\n    </div>\r\n  <% end %>\r\n<% end %>\r\n```\r\n\r\nIf you pass in objects that don't respond to the attribute method (like\r\nstarts_at), then all the meetings will be yielded each day. This lets you\r\ndo custom filtering however you want.\r\n\r\n## Customizing The Calendar\r\n\r\nYou can change a couple of global options that will affect how the\r\ncalendars are generated:\r\n\r\n```ruby\r\nTime.zone = \"Central Time (US & Canada)\"\r\n```\r\n\r\nSetting `Time.zone` will make sure the calendar start days are correctly computed\r\nin the right timezone. You can set this globally in your `application.rb` file or\r\nif you have a User model with a time_zone attribute, you can set it on every request by using\r\na before_filter like the following example.\r\n\r\nThis code example uses [Devise](https://github.com/plataformatec/devise)'s\r\n`current_user` and `user_signed_in?` methods to retrieve the user's timezone and set it for the duration of the request.\r\nMake sure to change the `:user_signed_in?` and `current_user` methods if you are\r\nusing some other method of authentication.\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  before_filter :set_time_zone, if: :user_signed_in?\r\n\r\n  private\r\n\r\n    def set_time_zone\r\n      Time.zone = current_user.time_zone\r\n    end\r\nend\r\n```\r\nOn the other hand, you can always pass a ``ActiveSupport::TimeZone`` object as an option to avoid possible timezone pollution:\r\n\r\n```erb\r\n<%= calendar timezone: ActiveSupport::TimeZone.new('Taipei') do |date, events| %>\r\n<% end %>\r\n```\r\n\r\nIf you want to set the time zone globally, you can set the following in\r\n`config/application.rb`:\r\n\r\n```ruby\r\nconfig.time_zone = 'Central Time (US & Canada)'\r\n```\r\n\r\nYou can also change the beginning day of the week by setting\r\n`Date.beginning_of_week` in a `before_filter` just like in the previous\r\nexample. If you want to set this globally, you can put this line in\r\n`config/application.rb`:\r\n\r\n```ruby\r\nconfig.beginning_of_week = :sunday\r\n```\r\n\r\nSetting classes on the table and elements are pretty easy.\r\n\r\nEach of the options are passed directly to the\r\nthe `content_tag` method so each of them **must** be a hash.\r\n\r\n```ruby\r\n\r\n<%= calendar table: {class: \"table table-bordered\"}, tr: {class: \"calendar-row\"}, td: {class: \"day\"}, do |date| %>\r\n<% end %>\r\n```\r\n\r\nThis will set the class of `table table-bordered` on the `table` HTML\r\nelement.\r\n\r\n### Custom Day Classes\r\n\r\n`td` is an option for setting the options on the td content tag that is\r\ngenerated. By default, simple_calendar renders the following classes for\r\nany given day in a calendar:\r\n\r\n\r\n```ruby\r\ntd_class = [\"day\"]\r\ntd_class << \"today\"  if today == current_calendar_date\r\ntd_class << \"past\"   if today > current_calendar_date\r\ntd_class << \"future\" if today < current_calendar_date\r\ntd_class << \"prev-month\"    if start_date.month != current_calendar_date.month && current_calendar_date < start_date\r\ntd_class << \"next-month\"    if start_date.month != current_calendar_date.month && current_calendar_date > start_date\r\ntd_class << \"current-month\" if start_date.month == current_calendar_date.month\r\ntd_class << \"wday-#{current_calendar_date.wday.to_s}\"\r\n```\r\n\r\nYou can set your CSS styles based upon these if you want to highlight\r\nspecific days or types of days. If you wish to override this\r\nfunctionality, just set the `tr` option to a lambda that accepts two\r\ndates and returns a hash. The hash will be passed in directly to the\r\ncontent_tag options. If you wish to set a class or data attributes, just\r\nset them as you normally would in a content_tag call.\r\n\r\n```erb\r\n<%= month_calendar td: ->(start_date, current_calendar_date) { {class: \"calendar-date\", data: {day: current_calendar_date}} } do |day| %>\r\n<% end %>\r\n```\r\n\r\nThis generate each day in the calendar like this:\r\n\r\n```html\r\n<td class=\"calendar-date\" data-day=\"2014-05-11\">\r\n</td>\r\n```\r\n\r\nInstead of writing the lambdas inline, a cleaner approach is to write a\r\nhelper that returns a lambda. You can duplicate the following example by\r\nadding this to one of your helpers:\r\n\r\n```ruby\r\ndef month_calendar_td_options\r\n  ->(start_date, current_calendar_date) {\r\n    {class: \"calendar-date\", data: {day: current_calendar_date}}\r\n  }\r\nend\r\n```\r\n\r\nAnd then your view would use `month_calendar_td_options` as the value.\r\n\r\n```erb\r\n<%= month_calendar td: month_calendar_td_options do |date| %>\r\n<% end %>\r\n```\r\n\r\n### Custom Header Title And Links\r\n\r\nEach of the calendar methods will generate a header with links to the\r\nprevious and next views. The `month_calendar` also includes a header\r\nwith a title that tells you the current month and year that you are viewing.\r\n\r\nTo change these, you can pass in the `previous_link`, `title`, and\r\n`next_link` options into the calendar methods.\r\n\r\n**Use a method in your helpers to return a lambda instead of writing\r\nthem inline like these examples so your views are cleaner.**\r\n\r\n* `title` option is a lambda that shows at the top of the calendar. For\r\nmonth calendars, this is the Month and Year (May 2014)\r\n\r\n```erb\r\n<%= calendar title: ->(start_date) { content_tag :span, \"#{I18n.t(\"date.month_names\")[start_date.month]} #{start_date.year}\", class: \"calendar-title\" } do |date, events| %>\r\n<% end %>\r\n```\r\n\r\n* `previous_link` option is a standard `link_to` that is a left arrow and\r\nwith the current url having `?start_date=2014-04-30` appended to it as\r\na date in the previous view of the calendar.\r\n\r\n```erb\r\n<%= month_calendar previous_link: ->(param, date_range) { link_to raw(\"&laquo;\"), {param => date_range.first - 1.day} } do |date, events| %>\r\n<% end %>\r\n```\r\n\r\n* `next_link` option is a standard `link_to` that is a right arrow and\r\nwith the current url having `?start_date=2014-06-01` appended to it as\r\na date in the next view of the calendar.\r\n\r\n```erb\r\n<%= calendar next_link: ->(param, date_range) { link_to raw(\"&raquo;\"), {param => date_range.last + 1.day} } do |date, events| %>\r\n<% end %>\r\n```\r\n\r\n* `header` lets you add options to the header tag\r\n\r\n```erb\r\n<%= calendar header: {class: \"calendar-header\"} do |date, events| %>\r\n<% end %>\r\n```\r\n\r\n* `thead` allows you to customize the table headers. These are the\r\n  abbreviated day names by default (Sun Mon Tue Wed).\r\n\r\nYou can disable the `thead` line if you like by passing in `false`.\r\n\r\n```erb\r\n<%= calendar thead: false do |date, events| %>\r\n<% end %>\r\n```\r\n\r\n* `day_names` lets you customize the day names in the `thead` row.\r\n\r\nIf you want to use full day names instead of the abbreviated ones in the\r\ntable header, you can pass in the `day_names` option which points to a\r\nvalidate I18n array.\r\n\r\n```erb\r\n<%= calendar day_names: \"date.day_names\" do |date, events| %>\r\n<% end %>\r\n```\r\n\r\nWhich renders:\r\n\r\n```html\r\n<thead>\r\n  <tr>\r\n    <th>Sunday</th>\r\n    <th>Monday</th>\r\n    <th>Tuesday</th>\r\n    <th>Wednesday</th>\r\n  </tr>\r\n</thead>\r\n```\r\n\r\nBy default we use the `date.abbr_day_names` translation to have shorter\r\nheader names.\r\n\r\n```erb\r\n<%= calendar day_names: \"date.abbr_day_names\" do |date, events| %>\r\n<% end %>\r\n```\r\n\r\nThis renders:\r\n\r\n```html\r\n<thead>\r\n  <tr>\r\n    <th>Sun</th>\r\n    <th>Mon</th>\r\n    <th>Tue</th>\r\n    <th>Wed</th>\r\n  </tr>\r\n</thead>\r\n```\r\n\r\n### AJAX Calendars\r\n\r\nRendering calendars that update with AJAX is pretty simple. You'll need\r\nto wrap your calendar in a div, overwrite the `next_link` and `previous_link` options, and setup your\r\ncontroller to respond to JS requests. The response can simply replace\r\nthe HTML of the div with the newly rendered calendar.\r\n\r\nTake a look at **[excid3/simple_calendar-ajax-example](https://github.com/excid3/simple_calendar-ajax-example)** to see how it is done.\r\n\r\n## View Specs and Tests\r\n\r\nIf you're running view specs against views with calendars, you may run into route generation errors like the following:\r\n\r\n```\r\nFailure/Error: render\r\nActionView::Template::Error:\r\n  No route matches {:action=>\"show\", :controller=>\"controller_name\", :start_date=>Sun, 29 Mar 2015}\r\n```\r\n\r\nIf so, you can stub out the appropriate method like so (rspec 3 and up):\r\n\r\n```\r\nexpect_any_instance_of(SimpleCalendar::Calendar).to receive(:link_to).at_least(:once).and_return(\"\")\r\n```\r\n\r\nWith modifications as appropriate.\r\n\r\n## TODO\r\n\r\n- Multi-day events?\r\n\r\n## Author\r\n\r\nChris Oliver <chris@gorails.com>\r\n\r\n[https://gorails.com](https://gorails.com)\r\n\r\n[@excid3](https://twitter.com/excid3)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}